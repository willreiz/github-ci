# first we define our action name 
name: CI

# Trigger deployment only on push to main branch, and allow manual triggering
on:
  push:
    branches:
      - main
  workflow_dispatch:

# now we define the jobs we want to run - this section defines the jobs that will run as part of the workflow
jobs:
  build-test:
    # name is the human friendly name for the job
    name: Run Unit Tests
    # this is the type of virtual machine that the job will run on - jobs are handled by "runners", which is just a # virtual machine. Github hosts runners, which will we utilize, but it is possible to use self hosted runners # as well
    runs-on: ubuntu-latest
    # our jobs contains a sequence of actions, known as steps          
    steps:
      # uses - we are specifiying an action to run as part of our step. actions are custom applications that perform complex but frequently repeated task. this action will checkout our repository code to the runner
      - uses: actions/checkout@v3

      # this step will install composer dependencies (composer is a php package manager)
      - uses: php-actions/composer@v6

      # this step will run our phpunit tests
      - name: PHPUnit Tests
        uses: php-actions/phpunit@master
        env:
          TEST_NAME: Scarlett
        with:
          version: 9.6
          bootstrap: vendor/autoload.php
          configuration: test/phpunit.xml
          args: --coverage-text

      # this job will deploy our code to our EC2 instance
  deploy:
    name: Deploy to EC2 on master branch push
    runs-on: ubuntu-latest
    needs: build-test  # This ensures the "deploy" job depends on "build-test" job
    if: success()     # This ensures "deploy" job runs only if "build-test" is successful
    steps:
      - name: Checkout the files
        uses: actions/checkout@v3
        
      - name: Deploy to Server
        # this actions uses the rsync command to copy files from the runner to the ec2 server
        uses: easingthemes/ssh-deploy@main
        # the runner needs to connect to our EC2 server so its needs to know the host, username, and key file so it can connect. It is using the values we defined as secrets in the previous step
        env: 
          SSH_PRIVATE_KEY: ${{secrets.EC2_SSH_KEY}}
          REMOTE_HOST: ${{secrets.REMOTE_HOST}}
          REMOTE_USER: ${{secrets.REMOTE_USER}}
          TARGET: ${{secrets.TARGET}}
  # this job will run composer install on our EC2 instance
  composer:
    name: Run composer install on EC2 instance
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: execute composer install
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{secrets.REMOTE_HOST}}
          username: ${{secrets.REMOTE_USER}}
          key: ${{secrets.EC2_SSH_KEY}}
          script: |
            cd ${{secrets.TARGET}}
            composer install